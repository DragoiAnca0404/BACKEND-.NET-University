// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace App_Facultate.Migrations
{
    [DbContext(typeof(FacultateContext))]
    [Migration("20231203181209_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17");

            modelBuilder.Entity("Model.Administratori", b =>
                {
                    b.Property<int>("id_administrator")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("Utilizatoriid_utilizator")
                        .HasColumnType("int");

                    b.Property<int>("id_utilizator")
                        .HasColumnType("int");

                    b.HasKey("id_administrator");

                    b.HasIndex("Utilizatoriid_utilizator");

                    b.ToTable("Administratori");

                    b.HasData(
                        new
                        {
                            id_administrator = 1,
                            id_utilizator = 5
                        });
                });

            modelBuilder.Entity("Model.Studenti", b =>
                {
                    b.Property<int>("id_student")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("Specializariid_Specializare")
                        .HasColumnType("int");

                    b.Property<int?>("Utilizatoriid_utilizator")
                        .HasColumnType("int");

                    b.Property<int>("id_specializare")
                        .HasColumnType("int");

                    b.Property<int>("id_utilizator")
                        .HasColumnType("int");

                    b.Property<bool>("scutit_plata")
                        .HasColumnType("bit");

                    b.HasKey("id_student");

                    b.HasIndex("Specializariid_Specializare");

                    b.HasIndex("Utilizatoriid_utilizator");

                    b.ToTable("Studenti");

                    b.HasData(
                        new
                        {
                            id_student = 1,
                            id_specializare = 1,
                            id_utilizator = 1,
                            scutit_plata = true
                        },
                        new
                        {
                            id_student = 2,
                            id_specializare = 2,
                            id_utilizator = 2,
                            scutit_plata = false
                        },
                        new
                        {
                            id_student = 3,
                            id_specializare = 3,
                            id_utilizator = 6,
                            scutit_plata = false
                        },
                        new
                        {
                            id_student = 4,
                            id_specializare = 4,
                            id_utilizator = 7,
                            scutit_plata = true
                        },
                        new
                        {
                            id_student = 5,
                            id_specializare = 6,
                            id_utilizator = 8,
                            scutit_plata = true
                        });
                });

            modelBuilder.Entity("Model.Utilizatori", b =>
                {
                    b.Property<int>("id_utilizator")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nume")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("parola")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("prenume")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("id_utilizator");

                    b.ToTable("Utilizatori");

                    b.HasData(
                        new
                        {
                            id_utilizator = 1,
                            email = "matei_matt@yahoo.ro",
                            nume = "Solomon",
                            parola = "matte777*",
                            prenume = "Matei",
                            username = "MateiSolomon"
                        },
                        new
                        {
                            id_utilizator = 2,
                            email = "ana_maria@yahoo.com",
                            nume = "Ion",
                            parola = "ana827272",
                            prenume = "Ana-Maria",
                            username = "AnaMaria"
                        },
                        new
                        {
                            id_utilizator = 3,
                            email = "george_07@gmail.com",
                            nume = "Ciobanu",
                            parola = "dogiuaaj922",
                            prenume = "George",
                            username = "George0647"
                        },
                        new
                        {
                            id_utilizator = 4,
                            email = "flo_andrei@yahoo.com",
                            nume = "Florescu",
                            parola = "moviehsjjs",
                            prenume = "Andrei",
                            username = "FlorescuAndrei"
                        },
                        new
                        {
                            id_utilizator = 5,
                            email = "anastasia_sia@yahoo.ro",
                            nume = "Soare",
                            parola = "sia73737*",
                            prenume = "Anastasia",
                            username = "AnastasiaS"
                        },
                        new
                        {
                            id_utilizator = 6,
                            email = "ionescu_denis@gmail.com",
                            nume = "Ionescu",
                            parola = "boboc12345",
                            prenume = "Denis",
                            username = "IonescuDenis"
                        },
                        new
                        {
                            id_utilizator = 7,
                            email = "pop_ana1999@yahoo.com",
                            nume = "Pop",
                            parola = "pop1112",
                            prenume = "Ana",
                            username = "PopAna"
                        },
                        new
                        {
                            id_utilizator = 8,
                            email = "toma_mihai@yahoo.com",
                            nume = "Toma",
                            parola = "tom1112$",
                            prenume = "Mihai",
                            username = "TomaMihai"
                        });
                });

            modelBuilder.Entity("Models.Calificative", b =>
                {
                    b.Property<int>("id_Calificativ")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CurrentDateGrade")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("Materiiid_materie")
                        .HasColumnType("int");

                    b.Property<int?>("Studentiid_student")
                        .HasColumnType("int");

                    b.Property<int>("id_materie")
                        .HasColumnType("int");

                    b.Property<int>("id_student")
                        .HasColumnType("int");

                    b.Property<double>("nota")
                        .HasColumnType("float");

                    b.HasKey("id_Calificativ");

                    b.HasIndex("Materiiid_materie");

                    b.HasIndex("Studentiid_student");

                    b.ToTable("Calificative");

                    b.HasData(
                        new
                        {
                            id_Calificativ = 1,
                            CurrentDateGrade = "10-12-2023",
                            id_materie = 1,
                            id_student = 1,
                            nota = 10.0
                        },
                        new
                        {
                            id_Calificativ = 2,
                            CurrentDateGrade = "10-12-2023",
                            id_materie = 2,
                            id_student = 2,
                            nota = 9.0500000000000007
                        },
                        new
                        {
                            id_Calificativ = 3,
                            CurrentDateGrade = "10-12-2023",
                            id_materie = 2,
                            id_student = 3,
                            nota = 8.5500000000000007
                        },
                        new
                        {
                            id_Calificativ = 4,
                            CurrentDateGrade = "10-12-2023",
                            id_materie = 1,
                            id_student = 3,
                            nota = 10.0
                        },
                        new
                        {
                            id_Calificativ = 5,
                            CurrentDateGrade = "10-12-2023",
                            id_materie = 2,
                            id_student = 4,
                            nota = 5.0
                        },
                        new
                        {
                            id_Calificativ = 6,
                            CurrentDateGrade = "8-12-2023",
                            id_materie = 9,
                            id_student = 5,
                            nota = 9.8000000000000007
                        },
                        new
                        {
                            id_Calificativ = 7,
                            CurrentDateGrade = "10-10-2023",
                            id_materie = 9,
                            id_student = 5,
                            nota = 7.0
                        },
                        new
                        {
                            id_Calificativ = 8,
                            CurrentDateGrade = "17-07-2023",
                            id_materie = 9,
                            id_student = 5,
                            nota = 6.5
                        },
                        new
                        {
                            id_Calificativ = 9,
                            CurrentDateGrade = "14-06-2023",
                            id_materie = 10,
                            id_student = 5,
                            nota = 8.5
                        },
                        new
                        {
                            id_Calificativ = 10,
                            CurrentDateGrade = "20-06-2023",
                            id_materie = 10,
                            id_student = 5,
                            nota = 5.0999999999999996
                        },
                        new
                        {
                            id_Calificativ = 11,
                            CurrentDateGrade = "30-04-2023",
                            id_materie = 11,
                            id_student = 5,
                            nota = 9.5
                        },
                        new
                        {
                            id_Calificativ = 12,
                            CurrentDateGrade = "15-05-2023",
                            id_materie = 11,
                            id_student = 5,
                            nota = 7.7999999999999998
                        },
                        new
                        {
                            id_Calificativ = 13,
                            CurrentDateGrade = "04-04-2023",
                            id_materie = 11,
                            id_student = 5,
                            nota = 4.7999999999999998
                        });
                });

            modelBuilder.Entity("Models.Category_Jobs", b =>
                {
                    b.Property<int>("id_category_job")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("atributii_job")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("denumire_categorie_job")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("descriere_job")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("quality")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("id_category_job");

                    b.ToTable("Category_Jobs");

                    b.HasData(
                        new
                        {
                            id_category_job = 4,
                            atributii_job = "Analizezi datele folosind statistici și matematică.\r\nProgramezi, în special în limbaje precum Python sau R.\r\nLucrezi cu baze de date și cunoști limbajul SQL.\r\nCreezi vizualizări pentru a prezenta rezultatele.\r\nFolosești instrumente precum Excel, Pandas, NumPy pentru analiză.\r\nÎnțelegi conceptele statistice de bază.",
                            denumire_categorie_job = "Data Analyst",
                            descriere_job = "În mod succint, un analist de date colectează, analizează și interpretează date pentru a oferi informații valoroase în procesul decizional al unei organizații. Pentru a deveni un astfel de profesionist, trebuie să înveți să:\r\n\r\n",
                            quality = "Writing and communication, Statistical knowledge, Problem-solving skills, Creating dashboards and reports"
                        },
                        new
                        {
                            id_category_job = 3,
                            atributii_job = "HTML: Înțelegerea structurii paginilor web folosind limbajul de marcă HTML pentru a defini elementele.\r\n\r\nCSS: Cunoașterea stilurilor de formatare și design folosind CSS pentru a da aspectul dorit paginilor web.\r\n\r\nJavaScript: Învățarea limbajului de programare JavaScript pentru adăugarea de interactivitate și funcționalități la paginile web.\r\n\r\nResponsive Design: Abilitatea de a crea pagini web care se adaptează la diferite dimensiuni de ecran (dispozitive desktop, tablete, telefoane mobile).\r\n\r\nFramework-uri Frontend: Cunoașterea unor cadre de lucru precum React, Angular sau Vue.js pentru dezvoltarea mai eficientă și organizată a interfețelor.\r\n\r\nVersion Control/Git: Înțelegerea sistemelor de control al versiunilor, cum ar fi Git, pentru colaborare și gestionarea eficientă a codului. ",
                            denumire_categorie_job = "Frontend DEVELOPER",
                            descriere_job = "Un dezvoltator de frontend este responsabil pentru crearea și implementarea componentelor vizuale ale unei aplicații web sau mobile.Pentru a deveni un dezvoltator de frontend, trebuie să înveți următoarele:\r\n\r\n",
                            quality = "Writing and communication,UI/UX Design Skills, Problem-solving skills, Gândire analitică, Javascript, CSS, HTML, Framework"
                        },
                        new
                        {
                            id_category_job = 2,
                            atributii_job = "Limbaje de programare: Stăpânește cel puțin un limbaj de programare folosit în dezvoltarea backend, cum ar fi Python, Java, PHP, Ruby, Node.js, Go, etc.\r\n\r\nBaze de date: Înțelege conceptele bazelor de date și cunoaște SQL pentru a manipula și stoca datele în mod eficient.\r\n\r\nAPI-uri: Învățați să creați și să gestionați API-uri (Application Programming Interfaces) pentru a permite comunicația între frontend și backend.\r\n\r\nFramework-uri: Folosește cadre de lucru backend precum Django (Python), Ruby on Rails (Ruby), Spring (Java), Express.js (Node.js) pentru a dezvolta rapid și eficient. ",
                            denumire_categorie_job = "Backend DEVELOPER",
                            descriere_job = "Un dezvoltator de backend este responsabil pentru partea din spate a unei aplicații, care gestionează logica, stocarea datelor și comunicarea cu serverul. Pentru a deveni un dezvoltator de backend, trebuie să înveți următoarele:\r\n\r\n ",
                            quality = "Writing and communication, Familiarity with Servers, Problem-solving skills, Team player, Knowledge of APIs"
                        },
                        new
                        {
                            id_category_job = 1,
                            atributii_job = "Analiza Cerințelor: Înțelegerea detaliată a cerințelor utilizatorilor și a contextului în care va fi utilizat software-ul.\r\n\r\nProiectarea: Crearea unui plan sau unui design al arhitecturii și a funcționalităților software-ului.\r\n\r\nProgramare: Scrierea codului sursă folosind diverse limbaje de programare și tehnologii.\r\n\r\nTestare: Verificarea și validarea software-ului pentru a identifica erori și asigura funcționarea corectă.\r\n\r\nDebugging: Identificarea și corectarea erorilor și a problemelor de cod. ",
                            denumire_categorie_job = "Software Development",
                            descriere_job = "Dezvoltarea software implică creația, proiectarea și menținerea aplicațiilor și programelor informatice. Acest proces se referă la transformarea cerințelor și nevoilor utilizatorilor în soluții tehnice funcționale și utile. Iată o privire de ansamblu asupra dezvoltării software și ce presupune:\r\n\r\n ",
                            quality = "Writing and communication, Statistical knowledge, Problem-solving skills, Programming Languages, Team player, Algorithm and Data Structures"
                        });
                });

            modelBuilder.Entity("Models.Job_qualities", b =>
                {
                    b.Property<int>("id_job_quality")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("Category_Jobsid_category_job")
                        .HasColumnType("int");

                    b.Property<int>("id_category_job")
                        .HasColumnType("int");

                    b.Property<string>("quality")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("id_job_quality");

                    b.HasIndex("Category_Jobsid_category_job");

                    b.ToTable("Job_qualities");

                    b.HasData(
                        new
                        {
                            id_job_quality = 1,
                            id_category_job = 1,
                            quality = "Gândire analitică"
                        },
                        new
                        {
                            id_job_quality = 2,
                            id_category_job = 1,
                            quality = "Team player"
                        },
                        new
                        {
                            id_job_quality = 3,
                            id_category_job = 1,
                            quality = "Problem-solving skills"
                        },
                        new
                        {
                            id_job_quality = 4,
                            id_category_job = 1,
                            quality = "Organizat"
                        },
                        new
                        {
                            id_job_quality = 12,
                            id_category_job = 2,
                            quality = "Familiarity with Servers"
                        },
                        new
                        {
                            id_job_quality = 22,
                            id_category_job = 2,
                            quality = "Team player"
                        },
                        new
                        {
                            id_job_quality = 32,
                            id_category_job = 2,
                            quality = "Problem-solving skills"
                        },
                        new
                        {
                            id_job_quality = 42,
                            id_category_job = 2,
                            quality = "Organizat"
                        },
                        new
                        {
                            id_job_quality = 43,
                            id_category_job = 2,
                            quality = "Knowledge of APIs"
                        },
                        new
                        {
                            id_job_quality = 13,
                            id_category_job = 3,
                            quality = "HTML"
                        },
                        new
                        {
                            id_job_quality = 23,
                            id_category_job = 3,
                            quality = "CSS"
                        },
                        new
                        {
                            id_job_quality = 33,
                            id_category_job = 3,
                            quality = "Frameworks and Libraries"
                        },
                        new
                        {
                            id_job_quality = 47,
                            id_category_job = 3,
                            quality = "JavaScript"
                        },
                        new
                        {
                            id_job_quality = 15,
                            id_category_job = 4,
                            quality = "Writing and communication"
                        },
                        new
                        {
                            id_job_quality = 25,
                            id_category_job = 4,
                            quality = "Statistical knowledge"
                        },
                        new
                        {
                            id_job_quality = 35,
                            id_category_job = 4,
                            quality = "Problem-solving skills"
                        },
                        new
                        {
                            id_job_quality = 45,
                            id_category_job = 4,
                            quality = "Creating dashboards and reports"
                        });
                });

            modelBuilder.Entity("Models.Jobs", b =>
                {
                    b.Property<int>("id_job")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("Category_Jobsid_category_job")
                        .HasColumnType("int");

                    b.Property<string>("denumire_job")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("id_category_job")
                        .HasColumnType("int");

                    b.HasKey("id_job");

                    b.HasIndex("Category_Jobsid_category_job");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("Models.Materii", b =>
                {
                    b.Property<int>("id_materie")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("Studentiid_student")
                        .HasColumnType("int");

                    b.Property<string>("denumire_materie")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("id_student")
                        .HasColumnType("int");

                    b.HasKey("id_materie");

                    b.HasIndex("Studentiid_student");

                    b.ToTable("Materii");

                    b.HasData(
                        new
                        {
                            id_materie = 1,
                            denumire_materie = "Statistica economica",
                            id_student = 1
                        },
                        new
                        {
                            id_materie = 2,
                            denumire_materie = "Psihologie politica",
                            id_student = 2
                        },
                        new
                        {
                            id_materie = 3,
                            denumire_materie = "Bazele administratiei publice",
                            id_student = 3
                        },
                        new
                        {
                            id_materie = 4,
                            denumire_materie = "Tehnici promotionale",
                            id_student = 3
                        },
                        new
                        {
                            id_materie = 5,
                            denumire_materie = "Psihologie sociala",
                            id_student = 4
                        },
                        new
                        {
                            id_materie = 6,
                            denumire_materie = "Psihologie politica",
                            id_student = 3
                        },
                        new
                        {
                            id_materie = 7,
                            denumire_materie = "Psihologie politica",
                            id_student = 4
                        },
                        new
                        {
                            id_materie = 8,
                            denumire_materie = "Psihologie politica",
                            id_student = 1
                        },
                        new
                        {
                            id_materie = 9,
                            denumire_materie = "Sisteme de gestiune a bazelor de date",
                            id_student = 5
                        },
                        new
                        {
                            id_materie = 10,
                            denumire_materie = "Dezvoltarea aplicatiilor Web",
                            id_student = 5
                        },
                        new
                        {
                            id_materie = 11,
                            denumire_materie = "Programare orientata obiect - Java",
                            id_student = 5
                        });
                });

            modelBuilder.Entity("Models.Orar", b =>
                {
                    b.Property<int>("id_orar")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("Materiiid_materie")
                        .HasColumnType("int");

                    b.Property<string>("Time_end")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Time_start")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("id_materie")
                        .HasColumnType("int");

                    b.Property<int?>("ziua")
                        .HasColumnType("int");

                    b.HasKey("id_orar");

                    b.HasIndex("Materiiid_materie");

                    b.ToTable("Orar");

                    b.HasData(
                        new
                        {
                            id_orar = 1,
                            Time_end = "09:50",
                            Time_start = "08:00",
                            id_materie = 1,
                            ziua = 0
                        },
                        new
                        {
                            id_orar = 2,
                            Time_end = "11:50",
                            Time_start = "10:00",
                            id_materie = 1,
                            ziua = 0
                        },
                        new
                        {
                            id_orar = 3,
                            Time_end = "13:50",
                            Time_start = "12:00",
                            id_materie = 1,
                            ziua = 0
                        },
                        new
                        {
                            id_orar = 4,
                            Time_end = "15:50",
                            Time_start = "14:00",
                            id_materie = 1,
                            ziua = 0
                        },
                        new
                        {
                            id_orar = 5,
                            Time_end = "17:50",
                            Time_start = "16:00",
                            id_materie = 1,
                            ziua = 0
                        });
                });

            modelBuilder.Entity("Models.Profesori", b =>
                {
                    b.Property<int>("id_profesor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("Materiiid_materie")
                        .HasColumnType("int");

                    b.Property<int?>("Utilizatoriid_utilizator")
                        .HasColumnType("int");

                    b.Property<int?>("grad")
                        .HasColumnType("int");

                    b.Property<int>("id_materie")
                        .HasColumnType("int");

                    b.Property<int>("id_utilizator")
                        .HasColumnType("int");

                    b.Property<decimal>("salariu")
                        .HasColumnType("money");

                    b.HasKey("id_profesor");

                    b.HasIndex("Materiiid_materie");

                    b.HasIndex("Utilizatoriid_utilizator");

                    b.ToTable("Profesori");

                    b.HasData(
                        new
                        {
                            id_profesor = 1,
                            grad = 0,
                            id_materie = 1,
                            id_utilizator = 3,
                            salariu = 5000m
                        },
                        new
                        {
                            id_profesor = 2,
                            grad = 1,
                            id_materie = 2,
                            id_utilizator = 4,
                            salariu = 5800m
                        });
                });

            modelBuilder.Entity("Models.Specializari", b =>
                {
                    b.Property<int>("id_Specializare")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("denumire_specializare")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("id_Specializare");

                    b.ToTable("Specializari");

                    b.HasData(
                        new
                        {
                            id_Specializare = 1,
                            denumire_specializare = "Finante"
                        },
                        new
                        {
                            id_Specializare = 2,
                            denumire_specializare = "Stiinte politice"
                        },
                        new
                        {
                            id_Specializare = 3,
                            denumire_specializare = "Drept administrativ"
                        },
                        new
                        {
                            id_Specializare = 4,
                            denumire_specializare = "Marketing"
                        },
                        new
                        {
                            id_Specializare = 5,
                            denumire_specializare = "Asistenta sociala"
                        },
                        new
                        {
                            id_Specializare = 6,
                            denumire_specializare = "Computer science"
                        });
                });

            modelBuilder.Entity("Models.subject_category", b =>
                {
                    b.Property<int>("id_subject_category")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("Category_Jobsid_category_job")
                        .HasColumnType("int");

                    b.Property<int?>("Materiiid_materie")
                        .HasColumnType("int");

                    b.Property<int>("id_category_job")
                        .HasColumnType("int");

                    b.Property<int>("id_materie")
                        .HasColumnType("int");

                    b.HasKey("id_subject_category");

                    b.HasIndex("Category_Jobsid_category_job");

                    b.HasIndex("Materiiid_materie");

                    b.ToTable("subject_category");

                    b.HasData(
                        new
                        {
                            id_subject_category = 1,
                            id_category_job = 4,
                            id_materie = 9
                        },
                        new
                        {
                            id_subject_category = 2,
                            id_category_job = 2,
                            id_materie = 9
                        },
                        new
                        {
                            id_subject_category = 3,
                            id_category_job = 3,
                            id_materie = 10
                        },
                        new
                        {
                            id_subject_category = 4,
                            id_category_job = 1,
                            id_materie = 11
                        },
                        new
                        {
                            id_subject_category = 5,
                            id_category_job = 2,
                            id_materie = 10
                        });
                });

            modelBuilder.Entity("Model.Administratori", b =>
                {
                    b.HasOne("Model.Utilizatori", "Utilizatori")
                        .WithMany()
                        .HasForeignKey("Utilizatoriid_utilizator");

                    b.Navigation("Utilizatori");
                });

            modelBuilder.Entity("Model.Studenti", b =>
                {
                    b.HasOne("Models.Specializari", "Specializari")
                        .WithMany()
                        .HasForeignKey("Specializariid_Specializare");

                    b.HasOne("Model.Utilizatori", "Utilizatori")
                        .WithMany()
                        .HasForeignKey("Utilizatoriid_utilizator");

                    b.Navigation("Specializari");

                    b.Navigation("Utilizatori");
                });

            modelBuilder.Entity("Models.Calificative", b =>
                {
                    b.HasOne("Models.Materii", "Materii")
                        .WithMany()
                        .HasForeignKey("Materiiid_materie");

                    b.HasOne("Model.Studenti", "Studenti")
                        .WithMany()
                        .HasForeignKey("Studentiid_student");

                    b.Navigation("Materii");

                    b.Navigation("Studenti");
                });

            modelBuilder.Entity("Models.Job_qualities", b =>
                {
                    b.HasOne("Models.Category_Jobs", "Category_Jobs")
                        .WithMany()
                        .HasForeignKey("Category_Jobsid_category_job");

                    b.Navigation("Category_Jobs");
                });

            modelBuilder.Entity("Models.Jobs", b =>
                {
                    b.HasOne("Models.Category_Jobs", "Category_Jobs")
                        .WithMany()
                        .HasForeignKey("Category_Jobsid_category_job");

                    b.Navigation("Category_Jobs");
                });

            modelBuilder.Entity("Models.Materii", b =>
                {
                    b.HasOne("Model.Studenti", "Studenti")
                        .WithMany()
                        .HasForeignKey("Studentiid_student");

                    b.Navigation("Studenti");
                });

            modelBuilder.Entity("Models.Orar", b =>
                {
                    b.HasOne("Models.Materii", "Materii")
                        .WithMany()
                        .HasForeignKey("Materiiid_materie");

                    b.Navigation("Materii");
                });

            modelBuilder.Entity("Models.Profesori", b =>
                {
                    b.HasOne("Models.Materii", "Materii")
                        .WithMany()
                        .HasForeignKey("Materiiid_materie");

                    b.HasOne("Model.Utilizatori", "Utilizatori")
                        .WithMany()
                        .HasForeignKey("Utilizatoriid_utilizator");

                    b.Navigation("Materii");

                    b.Navigation("Utilizatori");
                });

            modelBuilder.Entity("Models.subject_category", b =>
                {
                    b.HasOne("Models.Category_Jobs", "Category_Jobs")
                        .WithMany()
                        .HasForeignKey("Category_Jobsid_category_job");

                    b.HasOne("Models.Materii", "Materii")
                        .WithMany()
                        .HasForeignKey("Materiiid_materie");

                    b.Navigation("Category_Jobs");

                    b.Navigation("Materii");
                });
#pragma warning restore 612, 618
        }
    }
}
